// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         String        @id // Clerk's user ID
  email      String        @unique
  username   String?       @unique
  firstName  String?
  lastName   String?
  libraries  Library[]
  playlists  Playlist[]
  likedSongs Song[]        @relation("UserLikedSongs")
  settings   UserSettings? // Relation to user settings
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @default(now()) // Added default value to resolve migration issue
}

model UserSettings {
  id                 String   @id @default(cuid())
  themeColor         String   @default("#5891fa") // Settings | Default theme color
  highlightedQueries Boolean  @default(false) // Settings | Search setting - highlight queries
  showSidebarIcons   Boolean  @default(true) // Settings | Sidebar setting - show icons
  soundcloudUserId   String? // SoundCloud User ID for accessing user's SoundCloud data
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String   @unique // One-to-one relationship
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now()) // Added default value to resolve migration issue
}

model Library {
  id        String   @id @default(cuid())
  name      String?
  songs     Song[]
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) // Added default value to resolve migration issue
}

model Song {
  id        String     @id // SoundCloud ID
  // title     String
  // artist    String
  // url       String // URL to the audio file
  // artwork   String? // URL to artwork
  libraries Library[] // Songs can be in multiple libraries
  playlists Playlist[] // Songs can be in multiple playlists
  likedBy   User[]     @relation("UserLikedSongs")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) // Added default value to resolve migration issue
}

model Playlist {
  id          String   @id @default(cuid())
  name        String
  description String?
  isPublic    Boolean  @default(false)
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  songs       Song[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) // Added default value to resolve migration issue
}
